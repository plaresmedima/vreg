
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "generated\examples\plot_3d_multislice_translation_t1.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_generated_examples_plot_3d_multislice_translation_t1.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_generated_examples_plot_3d_multislice_translation_t1.py:


====================================
Multislice 2D to 3D translation (T1)
====================================

This example illustrates 2D to 3D coregistration using 3D translations

The moving volume is an oblique multi-slice T1 map and the static volume is 
a 3D coronal mask covering both kidneys. 

An initial 3D translation is performed using both kidneys as a static target. 
In a second step, fine tuning is done for each kidney separately.

Coregistration is performed by brute force optimization using a 
mutual information metric.

.. GENERATED FROM PYTHON SOURCE LINES 19-22

Setup
-----
Import packages

.. GENERATED FROM PYTHON SOURCE LINES 22-37

.. code-block:: Python

    import vreg
    import vreg.plot as plt


    # Get static volumes
    lk = vreg.fetch('left_kidney')
    rk = vreg.fetch('right_kidney')

    # get moving volumes
    multislice = vreg.fetch('T1')

    # Get geometrical reference
    dixon = vreg.fetch('Dixon_water')









.. GENERATED FROM PYTHON SOURCE LINES 38-42

Format data
-----------
Create a mask containing both kidneys (bk) with the geometry of the 
complete DIXON series

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: Python


    bk = lk.slice_like(dixon).add(rk)








.. GENERATED FROM PYTHON SOURCE LINES 46-48

Extract bounding boxes to reduce the size of the volume. This is not 
necessary but it speeds up the calculation a little as the volume is smaller.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: Python


    bk = bk.bounding_box()
    lk = lk.bounding_box()
    rk = rk.bounding_box()








.. GENERATED FROM PYTHON SOURCE LINES 54-56

If we overlay the mask on the volume, we clearly see the misalignment due to 
different breath holding positions:

.. GENERATED FROM PYTHON SOURCE LINES 56-59

.. code-block:: Python


    plt.overlay_2d(multislice, bk)




.. image-sg:: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_001.png
   :alt: plot 3d multislice translation t1
   :srcset: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 60-66

Coregister to both kidneys
--------------------------
In a first step we coregister by 3D translation to both kidneys. Since the 
moving data are multislice, we need to perform a coregistration for each 
slice separately. We perform brute force optimization allowing translations 
between [-20, 20] mm in-slice, and [-5, 5] mm through-slice, in steps of 2mm:

.. GENERATED FROM PYTHON SOURCE LINES 66-86

.. code-block:: Python


    # Optimizer settings
    optimizer = {
        'method': 'brute',
        'grid': (
            [-20, 20, 20],
            [-20, 20, 20],
            [-5, 5, 5],
        ), 
    }
    # Translations are defined in volume coordinates
    options = {
        'coords':'volume', 
    }
    # Perform the coregistration for each slice 
    for z, sz in enumerate(multislice):
        tz = sz.find_translate_to(bk, optimizer=optimizer, **options)  
        multislice[z] = sz.translate(tz, **options)









.. GENERATED FROM PYTHON SOURCE LINES 87-89

If we overlay the mask on the new volume, we can see that the misalignment 
is significantly reduced but some imperfections still remain.

.. GENERATED FROM PYTHON SOURCE LINES 89-92

.. code-block:: Python


    plt.overlay_2d(multislice, bk)




.. image-sg:: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_002.png
   :alt: plot 3d multislice translation t1
   :srcset: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 93-97

Left kidney fine tuning
-----------------------
We now perform a rigid transformation to the left kidney to fine tune the 
alignment.

.. GENERATED FROM PYTHON SOURCE LINES 97-107

.. code-block:: Python


    # Try 10 translations between +/- 2mm in each directon
    optimizer['grid'] = 3*[[-2, 2, 10]]

    # Perform the fine tuning
    align_lk = []
    for z, sz in enumerate(multislice):
        tz = sz.find_translate_to(lk, optimizer=optimizer, **options) 
        align_lk.append(sz.translate(tz, **options))








.. GENERATED FROM PYTHON SOURCE LINES 108-109

Plot the result

.. GENERATED FROM PYTHON SOURCE LINES 109-111

.. code-block:: Python

    plt.overlay_2d(align_lk, lk,  title='Left kidney alignment')




.. image-sg:: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_003.png
   :alt: plot 3d multislice translation t1
   :srcset: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 112-115

Right kidney fine tuning
------------------------
Repeat the same steps for the right kidney

.. GENERATED FROM PYTHON SOURCE LINES 115-121

.. code-block:: Python


    align_rk = []
    for z, sz in enumerate(multislice):
        tz = sz.find_translate_to(rk, optimizer=optimizer, **options)
        align_rk.append(sz.translate(tz, **options))








.. GENERATED FROM PYTHON SOURCE LINES 122-123

Plot the result

.. GENERATED FROM PYTHON SOURCE LINES 123-125

.. code-block:: Python

    plt.overlay_2d(align_rk, rk,  title='Right kidney alignment')




.. image-sg:: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_004.png
   :alt: plot 3d multislice translation t1
   :srcset: /generated/examples/images/sphx_glr_plot_3d_multislice_translation_t1_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (13 minutes 49.253 seconds)


.. _sphx_glr_download_generated_examples_plot_3d_multislice_translation_t1.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_3d_multislice_translation_t1.ipynb <plot_3d_multislice_translation_t1.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_3d_multislice_translation_t1.py <plot_3d_multislice_translation_t1.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: plot_3d_multislice_translation_t1.zip <plot_3d_multislice_translation_t1.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
